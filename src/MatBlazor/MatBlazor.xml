<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatBlazor</name>
    </assembly>
    <members>
        <member name="P:MatBlazor.BaseMatDomComponent.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDomComponent.Class">
            <summary>
            Specifies one or more classnames for an DOM element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatDomComponent.Style">
            <summary>
            Specifies an inline style for an DOM element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTooltip">
            <summary>
            The Material tooltip provides a text label that is displayed when the user hovers an element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatExpansionPanel">
            <summary>
            MatExpansionPanel provides an expandable details-summary view.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatAppBar">
            <summary>
            Acts as a container for items such as application title, navigation icon, and action items.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatAutocomplete`1">
            <summary>
            The autocomplete is a normal text input enhanced by a panel of suggested options.
            </summary>
            <typeparam name="ItemType">Type of element type.</typeparam>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.NumberOfElementsInPopup">
            <summary>
            Maximum number of elements displayed in the popup
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.Label">
            <summary>
            The label of the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.Icon">
            <summary>
            The Icon displayed as the leading icon for the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.StringValue">
            <summary>
            The StringValue displayed in the TextField
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.Value">
            <summary>
            The value to be used to pre-select an item from the list
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.ValueChanged">
            <summary>
            ValueChanged is fired when the value is selected(by clicking on an element in the popup)
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.ItemTemplate">
            <summary>
            ItemTemplate is used to render the elements in the popup if no template is given then the string value of the objects is displayed..
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.CustomStringSelector">
            <summary>
            This function is used to select the string part from the item, used both for filtering and displaying if no ItemTemplate is defined.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.Collection">
            <summary>
            The collection which should be rendered and filtered
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.Outlined">
            <summary>
            If this parameter is true then the style of the textbox is outlined see `MatTextfield`
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.OnOpenedChanged">
            <summary>
            OnOpenedChanged is fired when the popup dialog is opened or close and the parameter indicates whenever is it open, the default value is false
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.OnTextChanged">
            <summary>
            OnTextChanged is fired when the string value is changed(when an input occurs in the textfield or when an item is selected)
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.ShowClearButton">
            <summary>
            This value indicates if the clear button(using a trailing icon) should be displayed, which can clear the entire text and the selected value), the default value is false
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatAutocomplete`1.FullWidth">
            <summary>
            This value indicates if the textfield and the dialog will be or not displayed in the full screen, the default value is false
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatButton">
            <summary>
            Buttons communicate an action a user can take.
            They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.OnClick">
            <summary>
             Event occurs when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Command">
            <summary>
             Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.CommandParameter">
            <summary>
             Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Link">
            <summary>
            Link to a url when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Raised">
            <summary>
            Button has raised style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Unelevated">
            <summary>
            Button has unelevated style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Outlined">
            <summary>
            Button has outlined style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Dense">
            <summary>
            Button has dense style.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Disabled">
            <summary>
            Button is disabled.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Icon">
            <summary>
            Specifies an button's icon.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.TrailingIcon">
            <summary>
            Specifies if icon has trailing position.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.Label">
            <summary>
            Text label of Button.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatButton.ChildContent">
            <summary>
            Inline label of Button.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatCard">
            <summary>
            Cards contain content and actions about a single subject.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatCheckbox">
            <summary>
            Checkboxes allow the user to select multiple options from a set.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatChip">
            <summary>
            Chips are compact elements that allow users to enter information, select a choice, filter content, or trigger an action.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDatePicker">
            <summary>
            Datetime picker based on flatpickr.js
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDialog">
            <summary>
            Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDivider">
            <summary>
            MatDivider is a component that allows for Material styling of a line separator with various orientation options. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatDrawer">
            <summary>
            The navigation drawer slides in from the left and contains the navigation destinations for your app.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatElevation">
            <summary>
            Cards contain content and actions about a single subject.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatElevation.Elevation">
            <summary>
            Defines the level of elevation. The higher the number the higher the element will appear. This must
            be a value between 0 and 24 inclusive. Any other value will act as being 0.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatFAB">
            <summary>
            A floating action button represents the primary action in an application.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatHidden">
            <summary>
            Quickly and responsively toggle the visibility value of components and more with our hidden utilities.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatIconButton">
            <summary>
            Icons are appropriate for buttons that allow a user to take actions or make a selection, such as adding or removing a star to an item.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Icon">
            <summary>
            Default Button Icon
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Target">
            <summary>
            *Not available yet
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.ToggleIcon">
            <summary>
            Icon to use when Button is clicked
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Link">
            <summary>
            Navigate to this url when clicked.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Disabled">
            <summary>
            Button is disabled.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.Command">
            <summary>
             Command executed when the user clicks on an element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.CommandParameter">
            <summary>
             Command parameter.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatIconButton.OnClick">
            <summary>
             Event occurs when the user clicks on an element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatIcon">
            <summary>
            Makes it easier to use vector-based icons in your app.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatList">
            <summary>
            Lists present multiple line items vertically as a single continuous element. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatListItem">
            <summary>
            Lists present multiple line items vertically as a single continuous element.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatListItem.Href">
            <summary>
            The URL of the List Item
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatListItem.Disabled">
            <summary>
            List Item is disabled.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatMenu">
            <summary>
            Menus display a list of choices on a transient sheet of material.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatNumericUpDownField">
            <summary>
            Text fields allow users to input, edit, and select text.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNumericUpDownField.ReadOnly">
            <summary>
            When true, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNumericUpDownField.InputClass">
            <summary>
            Css class of input element
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatNumericUpDownField.InputStyle">
            <summary>
            Style attribute of input element
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatProgressBar">
            <summary>
            Progress indicators display the length of a process or express an unspecified wait time.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatRadioButton">
            <summary>
            Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatRipple">
            <summary>
            Ripples are visual representations used to communicate the status of a component or interactive element. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSelect">
            <summary>
            Selects allow users to select from a single-option menu. It functions as a wrapper around the browser's native select element.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSlider">
            <summary>
            Sliders let users select from a range of values by moving the slider thumb. 
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSlideToggle">
            <summary>
            Component for on/off control that can be toggled via clicking or dragging.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatSnackbar">
            <summary>
            Snackbars provide brief messages about app processes at the bottom of the screen.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTabBar">
            <summary>
            WARNING: In Development progress
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTabGroup">
            <summary>
            MatTabGroup organize content into separate views where only one view can be visible at a time. Each tab's label is shown in the tab header and the active tab's label is designated with the animated ink bar.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTable">
            <summary>
            Mat Table display a table data.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.RequestApiOnlyOnce">
            <summary>
            Specifies whether to Request the API only once.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.DebounceMilliseconds">
            <summary>
            Specifies the delay duration between user input on the Search Term Field. Default 800
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.FilterByColumnName">
            <summary>
            Specifies which column is used for the filter / search term. If this is populated the Search Textbox will be visible.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.SearchTermFieldLabel">
            <summary>
            Specifies the Label for the Filter / Search Term  Textbox
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.SearchTermFieldPlaceHolder">
            <summary>
            Specifies the Placeholder for the Filter / Search Term  Textbox
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.LoadInitialData">
            <summary>
            Specifies where to Load the Initial Table Data
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.ApiUrl">
            <summary>
            Specifies the API Url form for the table data 
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.ShowPaging">
            <summary>
            Specifies the Paging visibility
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.ShowFooter">
            <summary>
            Specifies the Table Footer visibility.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.Striped">
            <summary>
            Determines if table has alternating color rows.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTable.PageSize">
            <summary>
            The number of rows per page.
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatTextField">
            <summary>
            Text fields allow users to input, edit, and select text.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTextField.ReadOnly">
            <summary>
            When true, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTextField.InputClass">
            <summary>
            Css class of input element
            </summary>
        </member>
        <member name="P:MatBlazor.BaseMatTextField.InputStyle">
            <summary>
            Style attribute of input element
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatThemeProvider">
            <summary>
            The Material Design color system can be used to create a color theme that reflects your brand or style.
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Primary">
            <summary>
            The theme primary color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Secondary">
            <summary>
            The theme secondary color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Background">
            <summary>
            The theme background color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.Surface">
            <summary>
            The theme surface color
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnPrimary">
            <summary>
            Text color on top of a primary background
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnSecondary">
            <summary>
            Text color on top of a secondary background
            </summary>
        </member>
        <member name="P:MatBlazor.MatTheme.OnSurface">
            <summary>
            Text color on top of a surface background
            </summary>
        </member>
        <member name="T:MatBlazor.BaseMatToastContainer">
            <summary>
            Toasts provide brief notifications or messages about app processes
            </summary>
        </member>
        <member name="T:MatBlazor.IMatToaster">
            <inheritdoc />
            <summary>
            Represents an instance of the MatToaster engine
            </summary>
        </member>
        <member name="P:MatBlazor.IMatToaster.Toasts">
            <summary>
            The current list of toasts (either displayed or waiting to be shown)
            </summary>
        </member>
        <member name="P:MatBlazor.IMatToaster.Configuration">
            <summary>
            The global <see cref="T:MatBlazor.MatToastConfiguration"/> 
            </summary>
        </member>
        <member name="E:MatBlazor.IMatToaster.OnToastsUpdated">
            <summary>
            An event raised when the list of toasts changes or a global configuration setting is modified
            </summary>
        </member>
        <member name="M:MatBlazor.IMatToaster.Add(System.String,MatBlazor.MatToastType,System.String,System.String,System.Action{MatBlazor.MatToastOptions})">
            <summary>
            Displays a toast with the specified <see cref="T:MatBlazor.MatToast" />
            </summary>
            <param name="message">The toast main message</param>
            <param name="type">The optional toast <see cref="T:MatBlazor.MatToastType"/></param>
            <param name="title">The optional toast tile</param>
            <param name="icon">The optional toast icon</param>
            <param name="configure">An action for configuring a <see cref="T:MatBlazor.MatToastOptions"/> instance already containing the globally configured settings</param>
        </member>
        <member name="M:MatBlazor.IMatToaster.Clear">
            <summary>
            Hides all the toasts, including the ones waiting to be displayed
            </summary>
        </member>
        <member name="M:MatBlazor.IMatToaster.Remove(MatBlazor.MatToast)">
            <summary>
            Hides the specified <see cref="T:MatBlazor.MatToast"/>
            </summary>
            <param name="matToast">The <see cref="T:MatBlazor.MatToast"/> to be hidden</param>
        </member>
        <member name="T:MatBlazor.BaseMatToastItem">
            <summary>
            Toasts provide brief notifications or messages about app processes
            </summary>
        </member>
        <member name="T:MatBlazor.MatToast">
            <inheritdoc />
            <summary>
            Represents an instance of a Toast
            It handles the user interactions and orchestrates the the state transitions
            </summary>
        </member>
        <member name="T:MatBlazor.MatToastCommonOptions">
            <summary>
            The common options for MatToaster
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.Class">
            <summary>
            The main toast class. Defaults to <see cref="!:MatToastClasses.Toast"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.MaximumOpacity">
            <summary>
            The maximum opacity expressed as an integer percentage for a toast in the Visible state. Defaults to 80% where 0 means completely hidden and 100 means solid color.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowTransitionDuration">
            <summary>
            How long the showing transition takes to bring a toast to the MaximumOpacity and set it to the Visible state. Defaults to 500 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowStepDuration">
            <summary>
            Interval between component repaint during the showing trantition. Defaults to 100 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.VisibleStateDuration">
            <summary>
            How long the toast remain visible without user interaction. Defaults to 5000 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.HideTransitionDuration">
            <summary>
            How long the hiding transition takes to make a toast disappear. Defaults to 500 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.HideStepDuration">
            <summary>
            Interval between component repaint during the hiding trantition. Defaults to 100 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowProgressBar">
            <summary>
            States if a progressbar has to be shown during the toast Visible state. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ProgressBarStepDuration">
            <summary>
            Interval between component repaint during the Visible state: it's used only if ShowProgressBar is true. Defaults to 50 ms.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.ShowCloseButton">
            <summary>
            States if the close button has to be used for hiding a toast. The button presence disables the default "hide on click" behaviour. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.CloseIcon">
            <summary>
            The css class for the close icon. Defaults to <see cref="F:MatBlazor.MatToastClasses.CloseIcon"/>.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastCommonOptions.RequireInteraction">
            <summary>
            When true it disables the auto hiding and forces the user to interact with the toast for closing it. Defaults to false.
            </summary>
        </member>
        <member name="T:MatBlazor.MatToastConfiguration">
            <summary>
            Represents the global <see cref="T:MatBlazor.MatToastConfiguration"/> instance
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.NewestOnTop">
            <summary>
            Drives the toast display sequence: when true the newest displayable toast will be on top. Otherwise it will be on the bottom. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.PreventDuplicates">
            <summary>
            When true, a new toast with the same type, title and message of an already present toast will be ignored. Defaults to true.
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.MaxDisplayedToasts">
            <summary>
            The maximum number of toasts to be displayed at the same time. Defaults to 5
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastConfiguration.Position">
            <summary>
            The css class driving the toast position in the screen. The predefined positions are contained in <see cref="T:MatBlazor.MatToastPosition"/>. Defaults to <see cref="F:MatBlazor.MatToastPosition.TopRight"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection,MatBlazor.MatToastConfiguration)">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with the specified <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with the default <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="M:MatBlazor.MatToastExtension.AddMatToaster(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MatBlazor.MatToastConfiguration})">
            <summary>
            Adds a singleton <see cref="T:MatBlazor.IMatToaster"/> instance to the DI <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with an action for configuring the default <see cref="T:MatBlazor.MatToastConfiguration"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastOptions.Onclick">
            <summary>
            The async <see cref="T:System.Func`2"/> to be called on user click
            </summary>
        </member>
        <member name="P:MatBlazor.MatToastOptions.Type">
            <summary>
            The <see cref="P:MatBlazor.MatToastOptions.Type"/>
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.PageSizes">
            <summary>
            Not Functioning
            </summary>
        </member>
        <member name="P:MatBlazor.MatTable`1.Items">
            <summary>
            Specifies the data for the table.
            </summary>
        </member>
    </members>
</doc>
